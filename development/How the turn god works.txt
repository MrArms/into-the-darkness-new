
Made a working animation system

Action - an action that an actor performs - eg. attack, move etc. The command the actor wants to do
GameEvent - something that happens to an actor eg. Take damage, die, movement - this is the effect on the actor



You create an action and associate it with an actor - eg. Actor 1 attacks actors 2,3,4

Then you call the turnGod.startTurn function with the action
	
turnGod.startTurn()	
	
	This adds the actions to the turnGod._actionQueue and creates an empty turnGod._gameEventList
	
	turnGod.processAction() is now called
	
turnGod.processAction()
	
	This takes the first action from turnGod._actionQueue and calculates how the action affects any Actors
	
	This creates GameEvents for these effects and adds them to this._gameEventList and the relevant actors themselves
	At the same time it calculates whether any other Actions are created as a response and adds them to the turnGod._actionQueue
	
	NOTE the gameEvents are just stored in the actors, but it hasn't actually affected them just yet
	
	The gameEvents on the actors are picked up by the renderer and animated if necessary
		We could add a timer to the GameEvents if we want to add more complex animations
		
	After a delay for the animations to pan out it calls turnGod._resolveAction
	
turnGod._resolveAction();

	It goes through the eventList and resolves them on the actors they are associated with (eg. damage will damage the actor)
	
	If there are some actions left in the actionQueue then it calls processAction on the first one again, otherwise it calls this._game.turnFinished();	