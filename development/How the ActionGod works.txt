
Action - an action that an actor performs - eg. attack, move etc. The command the actor wants to do
		note that status effects are counted as an Action as they happen (eg. you are poisoned and take damage)
			perhaps a better definition of an Action is of a timing where animations take place (at once) where other actions have to wait
				So when an actor attacks multiple enemies that is one action
				
	The start of a status effect is also an Action as we want to play an action showing the status has taken effect
		Eg. Action.POISON_STATUS_START
				
GameEvent - something that happens to an actor eg. Take damage, die, movement - this is the effect on the actor
	GameEvents are used to animate stuff before resolving on the actor - you can give one Action multiple GameEvents which means you can have multiple animations happening at the same time
		This happens when multiple actors die in the same turn and also when you multiple targets are attacked

You create an action and associate it with an actor - eg. Actor 1 attacks actors 2,3,4

Then you call the actionGod.startTurn function with the action
	
actionGod.startTurn()	
	
	This adds the actions to the actionGod._actionQueue and creates an empty actionGod._gameEventList
	
	actionGod.processAction() is now called
	
actionGod.processAction()
	
	This takes the first action from actionGod._actionQueue and calculates how the action affects any Actors
	
	This creates GameEvents for these effects and adds them to this._gameEventList and the relevant actors themselves
	At the same time it calculates whether any other Actions are created as a response and adds them to the actionGod._actionQueue
	
	NOTE the gameEvents are stored in the actors, but it hasn't actually affected them just yet
	
	The gameEvents on the actors are picked up by the renderer and animated if necessary
		We could add a timer to the GameEvents if we want to add more complex animations
		
	After a delay for the animations to pan out it calls actionGod._resolveAction
	
actionGod._resolveAction();

	It goes through the eventList and resolves them on the actors they are associated with (eg. damage will damage the actor)
	
	If there are some actions left in the actionQueue then it calls processAction on the first one again, otherwise it calls this._game.turnFinished();	